// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const selectPortalApplication = `-- name: SelectPortalApplication :one
SELECT 
    pa.id AS endpoint_id,
    pa.account_id,
    a.plan_type AS plan,
    p.throughput_limit AS capacity_limit,
    p.monthly_relay_limit AS throughput_limit,
    ARRAY_AGG(DISTINCT uap.provider_user_id)::VARCHAR[] AS authorized_users
FROM portal_applications pa
LEFT JOIN accounts a 
    ON pa.account_id = a.id
LEFT JOIN pay_plans p 
    ON a.plan_type = p.plan_type
LEFT JOIN account_users au
    ON a.id = au.account_id
LEFT JOIN user_auth_providers uap
    ON au.user_id = uap.user_id
WHERE pa.id = $1
GROUP BY 
    pa.id,
    a.plan_type,
    p.throughput_limit,
    p.monthly_relay_limit
`

type SelectPortalApplicationRow struct {
	EndpointID      string      `json:"endpoint_id"`
	AccountID       pgtype.Text `json:"account_id"`
	Plan            pgtype.Text `json:"plan"`
	CapacityLimit   pgtype.Int4 `json:"capacity_limit"`
	ThroughputLimit pgtype.Int4 `json:"throughput_limit"`
	AuthorizedUsers []string    `json:"authorized_users"`
}

func (q *Queries) SelectPortalApplication(ctx context.Context, id string) (SelectPortalApplicationRow, error) {
	row := q.db.QueryRow(ctx, selectPortalApplication, id)
	var i SelectPortalApplicationRow
	err := row.Scan(
		&i.EndpointID,
		&i.AccountID,
		&i.Plan,
		&i.CapacityLimit,
		&i.ThroughputLimit,
		&i.AuthorizedUsers,
	)
	return i, err
}

const selectPortalApplications = `-- name: SelectPortalApplications :many

SELECT 
    pa.id AS endpoint_id,
    pa.account_id,
    a.plan_type AS plan,
    p.throughput_limit AS capacity_limit,
    p.monthly_relay_limit AS throughput_limit,
    ARRAY_AGG(DISTINCT uap.provider_user_id)::VARCHAR[] AS authorized_users
FROM portal_applications pa
LEFT JOIN accounts a 
    ON pa.account_id = a.id
LEFT JOIN pay_plans p 
    ON a.plan_type = p.plan_type
LEFT JOIN account_users au
    ON a.id = au.account_id
LEFT JOIN user_auth_providers uap
    ON au.user_id = uap.user_id
GROUP BY 
    pa.id,
    a.plan_type,
    p.throughput_limit,
    p.monthly_relay_limit
`

type SelectPortalApplicationsRow struct {
	EndpointID      string      `json:"endpoint_id"`
	AccountID       pgtype.Text `json:"account_id"`
	Plan            pgtype.Text `json:"plan"`
	CapacityLimit   pgtype.Int4 `json:"capacity_limit"`
	ThroughputLimit pgtype.Int4 `json:"throughput_limit"`
	AuthorizedUsers []string    `json:"authorized_users"`
}

// This file is used by SQLC to autogenerate the Go code needed by the database driver.
// It contains all queries used for fetching user data by the Gateway.
// See: https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
func (q *Queries) SelectPortalApplications(ctx context.Context) ([]SelectPortalApplicationsRow, error) {
	rows, err := q.db.Query(ctx, selectPortalApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectPortalApplicationsRow
	for rows.Next() {
		var i SelectPortalApplicationsRow
		if err := rows.Scan(
			&i.EndpointID,
			&i.AccountID,
			&i.Plan,
			&i.CapacityLimit,
			&i.ThroughputLimit,
			&i.AuthorizedUsers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
