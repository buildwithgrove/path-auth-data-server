// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/buildwithgrove/path-auth-data-server/grpc"
	"github.com/jackc/pgx/v5/pgtype"
)

const deleteGatewayEndpointChanges = `-- name: DeleteGatewayEndpointChanges :exec
DELETE FROM gateway_endpoint_changes
WHERE id = ANY($1::int [])
`

func (q *Queries) DeleteGatewayEndpointChanges(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.Exec(ctx, deleteGatewayEndpointChanges, dollar_1)
	return err
}

const getGatewayEndpointChanges = `-- name: GetGatewayEndpointChanges :many
SELECT id,
    gateway_endpoint_id,
    is_delete
FROM gateway_endpoint_changes
`

type GetGatewayEndpointChangesRow struct {
	ID                int32  `json:"id"`
	GatewayEndpointID string `json:"gateway_endpoint_id"`
	IsDelete          bool   `json:"is_delete"`
}

func (q *Queries) GetGatewayEndpointChanges(ctx context.Context) ([]GetGatewayEndpointChangesRow, error) {
	rows, err := q.db.Query(ctx, getGatewayEndpointChanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetGatewayEndpointChangesRow
	for rows.Next() {
		var i GetGatewayEndpointChangesRow
		if err := rows.Scan(&i.ID, &i.GatewayEndpointID, &i.IsDelete); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectGatewayEndpoint = `-- name: SelectGatewayEndpoint :one
SELECT ge.id AS endpoint_id,
    ge.auth_type,
    ge.api_key,
    p.throughput_limit,
    p.capacity_limit,
    p.capacity_limit_period::capacity_limit_period AS capacity_limit_period,
    ARRAY_AGG(geu.auth_provider_user_id) FILTER (
        WHERE geu.auth_provider_user_id IS NOT NULL
    )::varchar [] AS authorized_users
FROM gateway_endpoints ge
    LEFT JOIN plans p ON ge.plan_name = p.name
    LEFT JOIN gateway_endpoint_users geu ON ge.id = geu.gateway_endpoint_id
WHERE ge.id = $1
GROUP BY ge.id,
    ge.auth_type,
    ge.api_key,
    p.throughput_limit,
    p.capacity_limit,
    p.capacity_limit_period
`

type SelectGatewayEndpointRow struct {
	EndpointID          string                   `json:"endpoint_id"`
	AuthType            grpc.AuthType            `json:"auth_type"`
	ApiKey              pgtype.Text              `json:"api_key"`
	ThroughputLimit     pgtype.Int4              `json:"throughput_limit"`
	CapacityLimit       pgtype.Int4              `json:"capacity_limit"`
	CapacityLimitPeriod grpc.CapacityLimitPeriod `json:"capacity_limit_period"`
	AuthorizedUsers     []string                 `json:"authorized_users"`
}

func (q *Queries) SelectGatewayEndpoint(ctx context.Context, id string) (SelectGatewayEndpointRow, error) {
	row := q.db.QueryRow(ctx, selectGatewayEndpoint, id)
	var i SelectGatewayEndpointRow
	err := row.Scan(
		&i.EndpointID,
		&i.AuthType,
		&i.ApiKey,
		&i.ThroughputLimit,
		&i.CapacityLimit,
		&i.CapacityLimitPeriod,
		&i.AuthorizedUsers,
	)
	return i, err
}

const selectGatewayEndpoints = `-- name: SelectGatewayEndpoints :many

SELECT ge.id AS endpoint_id,
    ge.auth_type,
    ge.api_key,
    p.throughput_limit,
    p.capacity_limit,
    p.capacity_limit_period::capacity_limit_period AS capacity_limit_period,
    ARRAY_AGG(geu.auth_provider_user_id) FILTER (
        WHERE geu.auth_provider_user_id IS NOT NULL
    )::varchar [] AS authorized_users
FROM gateway_endpoints ge
    LEFT JOIN plans p ON ge.plan_name = p.name
    LEFT JOIN gateway_endpoint_users geu ON ge.id = geu.gateway_endpoint_id
GROUP BY ge.id,
    ge.auth_type,
    ge.api_key,
    p.throughput_limit,
    p.capacity_limit,
    p.capacity_limit_period
`

type SelectGatewayEndpointsRow struct {
	EndpointID          string                   `json:"endpoint_id"`
	AuthType            grpc.AuthType            `json:"auth_type"`
	ApiKey              pgtype.Text              `json:"api_key"`
	ThroughputLimit     pgtype.Int4              `json:"throughput_limit"`
	CapacityLimit       pgtype.Int4              `json:"capacity_limit"`
	CapacityLimitPeriod grpc.CapacityLimitPeriod `json:"capacity_limit_period"`
	AuthorizedUsers     []string                 `json:"authorized_users"`
}

// This file is used by SQLC to autogenerate the Go code needed by the database driver.
// It contains all queries used for fetching user data by the Gateway.
// See: https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
func (q *Queries) SelectGatewayEndpoints(ctx context.Context) ([]SelectGatewayEndpointsRow, error) {
	rows, err := q.db.Query(ctx, selectGatewayEndpoints)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectGatewayEndpointsRow
	for rows.Next() {
		var i SelectGatewayEndpointsRow
		if err := rows.Scan(
			&i.EndpointID,
			&i.AuthType,
			&i.ApiKey,
			&i.ThroughputLimit,
			&i.CapacityLimit,
			&i.CapacityLimitPeriod,
			&i.AuthorizedUsers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
