// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deletePortalApplicationChanges = `-- name: DeletePortalApplicationChanges :exec
DELETE FROM portal_application_changes
WHERE id = ANY($1::int [])
`

func (q *Queries) DeletePortalApplicationChanges(ctx context.Context, changeIds []int32) error {
	_, err := q.db.Exec(ctx, deletePortalApplicationChanges, changeIds)
	return err
}

const getPortalApplicationChanges = `-- name: GetPortalApplicationChanges :many
SELECT id,
    portal_app_id,
    is_delete
FROM portal_application_changes
`

type GetPortalApplicationChangesRow struct {
	ID          int32  `json:"id"`
	PortalAppID string `json:"portal_app_id"`
	IsDelete    bool   `json:"is_delete"`
}

func (q *Queries) GetPortalApplicationChanges(ctx context.Context) ([]GetPortalApplicationChangesRow, error) {
	rows, err := q.db.Query(ctx, getPortalApplicationChanges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPortalApplicationChangesRow
	for rows.Next() {
		var i GetPortalApplicationChangesRow
		if err := rows.Scan(&i.ID, &i.PortalAppID, &i.IsDelete); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const selectPortalApplication = `-- name: SelectPortalApplication :one
SELECT 
    pa.id AS endpoint_id,
    pas.secret_key_required,
    pa.account_id,
    a.plan_type AS plan,
    p.throughput_limit AS capacity_limit,
    p.monthly_relay_limit AS throughput_limit,
    COALESCE(
        ARRAY_AGG(DISTINCT uap.provider_user_id) FILTER (WHERE uap.provider_user_id IS NOT NULL),
        ARRAY[]::VARCHAR[]
    )::VARCHAR[] AS authorized_users
FROM portal_applications pa
LEFT JOIN portal_application_settings pas
    ON pa.id = pas.application_id
LEFT JOIN accounts a 
    ON pa.account_id = a.id
LEFT JOIN pay_plans p 
    ON a.plan_type = p.plan_type
LEFT JOIN account_users au
    ON a.id = au.account_id
LEFT JOIN user_auth_providers uap
    ON au.user_id = uap.user_id
WHERE pa.id = $1
GROUP BY 
    pa.id,
    a.plan_type,
    p.throughput_limit,
    p.monthly_relay_limit,
    pas.secret_key_required
`

type SelectPortalApplicationRow struct {
	EndpointID        string      `json:"endpoint_id"`
	SecretKeyRequired pgtype.Bool `json:"secret_key_required"`
	AccountID         pgtype.Text `json:"account_id"`
	Plan              pgtype.Text `json:"plan"`
	CapacityLimit     pgtype.Int4 `json:"capacity_limit"`
	ThroughputLimit   pgtype.Int4 `json:"throughput_limit"`
	AuthorizedUsers   []string    `json:"authorized_users"`
}

func (q *Queries) SelectPortalApplication(ctx context.Context, id string) (SelectPortalApplicationRow, error) {
	row := q.db.QueryRow(ctx, selectPortalApplication, id)
	var i SelectPortalApplicationRow
	err := row.Scan(
		&i.EndpointID,
		&i.SecretKeyRequired,
		&i.AccountID,
		&i.Plan,
		&i.CapacityLimit,
		&i.ThroughputLimit,
		&i.AuthorizedUsers,
	)
	return i, err
}

const selectPortalApplications = `-- name: SelectPortalApplications :many

SELECT 
    pa.id AS endpoint_id,
    pas.secret_key_required,
    pa.account_id,
    a.plan_type AS plan,
    p.throughput_limit AS capacity_limit,
    p.monthly_relay_limit AS throughput_limit,
    COALESCE(
        ARRAY_AGG(DISTINCT uap.provider_user_id) FILTER (WHERE uap.provider_user_id IS NOT NULL),
        ARRAY[]::VARCHAR[]
    )::VARCHAR[] AS authorized_users
FROM portal_applications pa
LEFT JOIN portal_application_settings pas
    ON pa.id = pas.application_id
LEFT JOIN accounts a 
    ON pa.account_id = a.id
LEFT JOIN pay_plans p 
    ON a.plan_type = p.plan_type
LEFT JOIN account_users au
    ON a.id = au.account_id
LEFT JOIN user_auth_providers uap
    ON au.user_id = uap.user_id
GROUP BY 
    pa.id,
    pas.secret_key_required,
    a.plan_type,
    p.throughput_limit,
    p.monthly_relay_limit
`

type SelectPortalApplicationsRow struct {
	EndpointID        string      `json:"endpoint_id"`
	SecretKeyRequired pgtype.Bool `json:"secret_key_required"`
	AccountID         pgtype.Text `json:"account_id"`
	Plan              pgtype.Text `json:"plan"`
	CapacityLimit     pgtype.Int4 `json:"capacity_limit"`
	ThroughputLimit   pgtype.Int4 `json:"throughput_limit"`
	AuthorizedUsers   []string    `json:"authorized_users"`
}

// This file is used by SQLC to autogenerate the Go code needed by the database driver.
// It contains all queries used for fetching user data by the Gateway.
// See: https://docs.sqlc.dev/en/latest/tutorials/getting-started-postgresql.html#schema-and-queries
func (q *Queries) SelectPortalApplications(ctx context.Context) ([]SelectPortalApplicationsRow, error) {
	rows, err := q.db.Query(ctx, selectPortalApplications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SelectPortalApplicationsRow
	for rows.Next() {
		var i SelectPortalApplicationsRow
		if err := rows.Scan(
			&i.EndpointID,
			&i.SecretKeyRequired,
			&i.AccountID,
			&i.Plan,
			&i.CapacityLimit,
			&i.ThroughputLimit,
			&i.AuthorizedUsers,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
